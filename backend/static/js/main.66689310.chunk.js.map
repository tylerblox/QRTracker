{"version":3,"sources":["actions/qrScannerActions.js","actions/adminStatisticsActions.js","components/ConfirmEventModal/ConfirmEventModal.jsx","components/QRScanner.js","reducers/adminReducers.js","components/admin/Statistics.js","components/admin/AdminRoutes.js","App.js","serviceWorker.js","reducers/qrScannerReducer.js","reducers/index.js","index.js"],"names":["resetScanner","dispatch","getState","type","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","scanCodeBegin","scanCodeError","error","payload","confirmCodeBegin","fetchEventsBegin","fetchEventsSuccess","events","fetchEventsError","ConfirmEventModal","props","className","error_with_confirmation","onClick","most_recent_code","event","icon","faCalendarDay","size","style","width","date","faStore","location","confirmQrCode","event_promoter","id","faCheck","faTimes","mapDispatchToProps","scanQrCode","url","fetch","process","then","res","ok","json","value","catch","err","confirmed","method","mode","cache","credentials","headers","redirect","body","JSON","stringify","Error","setScannerActive","active","qr_scanner","scanner_active","connect","React","useState","scanMode","state","setState","resultFromScanner","useEffect","handleScan","data","handleError","console","log","showModal","qr_code_fetched","qr_code_fetch_error","confirmed_qr_code","qrContent","useCallback","delay","onError","onScan","position","height","faArrowDown","color","marginLeft","marginRight","left","right","window","innerHeight","loading","faCamera","initialState","statisticsPageReducer","action","Statistics","useReducer","tableEvent","setTableEvent","queryParameter","getEvents","map","key","textAlign","event_promoters","promoter","promoter_name","registration_count","AdminRoutes","path","useRouteMatch","App","to","Boolean","hostname","match","fetching_qr_code","confirming_qr_code","rootReducer","combineReducers","message","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.66689310.chunk.js","sourcesContent":["export const QR_SCANNER_START = 'QR_SCANNER_START'\nexport const QR_SCANNER_SUCCESS = 'QR_SCANNER_SUCCESS'\nexport const QR_SCANNER_ERROR = 'QR_SCANNER_ERROR'\n\nexport const RESET = 'RESET'\n\nexport function resetScanner(){\n    return (dispatch, getState) => {\n        dispatch({\n            type: RESET,\n        })\n    }\n}\n\nfunction getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nconst scanCodeBegin = () => ({\n    type: QR_SCANNER_START\n})\nconst scanCodeSuccess = (value) => ({\n    type: QR_SCANNER_SUCCESS,\n    payload: {value}\n})\nconst scanCodeError = (error) => ({\n    type: QR_SCANNER_ERROR,\n    payload: {error}\n})\n\n\nexport function scanQrCode(url){\n    return (dispatch, getState) => {\n        dispatch(scanCodeBegin)\n        fetch(process.env.REACT_APP_SSL + '://' + url)\n        .then(res => {\n\n            if (!res.ok){\n                dispatch(scanCodeError(res))\n            }\n            \n            return res.json()\n        })\n        .then(\n            json => dispatch(scanCodeSuccess(json))\n        )\n        .catch(err => dispatch(scanCodeError(err)))\n    }\n}\n\nexport const CONFIRM_CODE_START = 'CONFIRM_CODE_START'\nexport const CONFIRM_CODE_SUCCESS = 'CONFIRM_CODE_SUCCESS'\nexport const CONFIRM_CODE_ERROR = 'CONFIRM_CODE_ERROR'\n\nconst confirmCodeBegin = () => ({\n    type: CONFIRM_CODE_START\n})\nconst confirmCodeSuccess = (value) => ({\n    type: CONFIRM_CODE_SUCCESS,\n    payload: {value}\n})\nconst confirmCodeError = (error) => ({\n    type: CONFIRM_CODE_ERROR,\n    payload: {error}\n})\n\nexport function confirmQrCode(confirmed, payload){\n    if (confirmed){\n        return (dispatch, getState) => {\n            dispatch(confirmCodeBegin)\n            fetch(\n                process.env.REACT_APP_HOST + '/api/event_register/',\n                {\n                    method: 'POST', // *GET, POST, PUT, DELETE, etc.\n                    mode: 'cors', // no-cors, *cors, same-origin\n                    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                    credentials: 'same-origin', // include, *same-origin, omit\n                    headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': getCookie('csrftoken')\n                    },\n                    redirect: 'follow', // manual, *follow, error\n                    body: JSON.stringify(payload) // body data type must match \"Content-Type\" header\n                }\n            )\n            .then(res => {\n                if (!res.ok){\n                    throw new Error('Whoops!')\n                }\n                \n                return res.json()\n            })\n            .then(\n                json => dispatch(confirmCodeSuccess(json))\n            )\n            .catch(err => dispatch(confirmCodeError(err)))\n        }\n    } else {\n        return resetScanner()\n    }\n}\nexport const SET_SCANNER_ACTIVE = 'SET_SCANNER_ACTIVE'\n\nexport function setScannerActive(active=true){\n    return (dispatch, getState) => {\n        const most_recent_code = !active ? getState().qr_scanner.most_recent_code : null\n        dispatch({\n            type: SET_SCANNER_ACTIVE,\n            payload: {scanner_active: active, most_recent_code}\n        })\n    }\n}","export const FETCH_EVENTS_START = 'FETCH_EVENTS_START'\nexport const FETCH_EVENTS_SUCCESS = 'FETCH_EVENTS_SUCCESS'\nexport const FETCH_EVENTS_ERROR = 'FETCH_EVENTS_ERROR'\n\nconst fetchEventsBegin = () => ({\n    type: FETCH_EVENTS_START\n})\nconst fetchEventsSuccess = (events) => ({\n    type: FETCH_EVENTS_SUCCESS,\n    payload: {events}\n})\nconst fetchEventsError = (error) => ({\n    type: FETCH_EVENTS_ERROR,\n    payload: {error}\n})\n\nexport function getEvents(queryParameter=''){\n    return (dispatch) => {\n        dispatch(fetchEventsBegin)\n        fetch(\n            process.env.REACT_APP_HOST + `/api/events/${queryParameter ? '?' : ''}${queryParameter}`,\n            {\n                mode: 'cors', // no-cors, *cors, same-origin\n                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                credentials: 'same-origin', // include, *same-origin, omit\n                redirect: 'follow', // manual, *follow, error\n            }\n        )\n        .then(res => {\n            if (!res.ok){\n                throw new Error('Whoops!')\n            }\n            \n            return res.json()\n        })\n        .then(\n            json => dispatch(fetchEventsSuccess(json))\n        )\n        .catch(err => dispatch(fetchEventsError(err)))\n    }\n}","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCheck, faTimes, faCalendarDay, faStore } from '@fortawesome/free-solid-svg-icons'\n\nexport const ConfirmEventModal = (props) => {\n    \n    return (\n          <div className=\"confirm-event-modal\">\n            <div className=\"confirm-event-content\">\n                {props.error_with_confirmation && (<p className=\"error-text\">Error in confirming event.  Please try again, or <span onClick={props.resetScanner}>Scan a new Code</span></p>)}\n                <div className=\"confirm-event-content--topic\">Confirm this Event</div>\n                <div className=\"confirm-event-content--event\">\n                    <div className=\"event-name-display-holder\">\n                        <h1 className=\"confirm-event-content--event--name\">\n                            {props.most_recent_code.event.name}\n                        </h1>\n                    </div>\n                    <ul>\n                        <li>\n                            <FontAwesomeIcon icon={faCalendarDay} size={'2x'} style={{width: 32}}/><span>{props.most_recent_code.event.date}</span>\n                        </li>\n                        <li>\n                            <FontAwesomeIcon icon={faStore} size={'2x'} style={{width: 32}}/>{props.most_recent_code.event.location.name}\n                        </li>\n                    </ul>\n                </div>\n                \n            </div>\n            <div className=\"confirmation-buttons\">\n                <button\n                className=\"button--primary\"\n                onClick={\n                    () => {\n                      props.confirmQrCode(true, {event_promoter: props.most_recent_code.id})\n                    }\n                }\n                >\n                <FontAwesomeIcon icon={faCheck} size={'4x'}/>\n                </button>\n\n                <button\n                className=\"button--secondary\"\n                onClick={\n                    () => {\n                      props.confirmQrCode(false, {})\n                    }\n                }\n                >\n                <FontAwesomeIcon icon={faTimes} size={'4x'}/>\n                </button>\n            </div>\n\n          </div>\n        )\n        \n}","import React from 'react';\n\nimport { connect } from 'react-redux'\nimport QrReader from 'react-qr-reader'\nimport {scanQrCode, confirmQrCode, setScannerActive, resetScanner} from '../actions'\nimport '../App.css';\nimport {ConfirmEventModal} from './ConfirmEventModal'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCamera, faArrowDown } from '@fortawesome/free-solid-svg-icons'\n\nfunction QRScanner(props) {\n  const [state, setState] = React.useState({\n    scanMode: true\n  })\n  const {setScannerActive} = props\n\n  const {most_recent_code:resultFromScanner} = props\n\n  React.useEffect(\n    () => {\n      resultFromScanner && setScannerActive(false)\n    },[resultFromScanner, setScannerActive]\n  )\n\n  const handleScan = data => {\n    if (data) {\n      props.scanQrCode(data)\n    }\n  }\n\n  const handleError = err => {\n    console.log('DO SOME THING WITH THIS ERROR')\n    console.error(err)\n  }\n  const changeScanModeSetting = () => {\n    const {scanMode} = state\n    props.resetScanner()\n    setState({...state, scanMode: !scanMode})\n    \n  }\n\n  const showModal = (\n    props.most_recent_code\n    && props.qr_code_fetched &&\n    !props.qr_code_fetch_error \n    && !props.confirmed_qr_code\n  )\n\n  const qrContent = React.useCallback((()=>{\n    console.log(props)\n    switch(true){\n      case !! props.qr_code_fetch_error:\n        return (\n          <p>\n            There was an error scanning the QR code.. {props.qr_code_fetch_error}\n          </p>\n        )\n      case props.most_recent_code && props.confirmed_qr_code:\n        return <h2 className=\"registration-success\">Successfully registered!</h2>\n      case props.scanner_active:\n        return (\n          <QrReader\n            className=\"qr-scanner\"\n            delay={1000}\n            onError={handleError}\n            onScan={handleScan}\n          />\n        )\n      default:\n        return <>\n          <p> Begin Scanning Below...</p>\n          <div style={{position: 'relative', height: '100%'}}>\n          <FontAwesomeIcon icon={faArrowDown} size={'2x'}\n            className=\"arrow-moving-down\"\n            style={{color: \"#FFF\", marginLeft: 'auto', position: 'absolute', marginRight: 'auto', left: 0, right: 0}}\n          />\n          </div>\n          </>\n\n    }\n  }\n  )(), [props])\n  return (\n    <div className=\"App\" style={{height: window.innerHeight}}>\n\n      {\n        showModal && <ConfirmEventModal \n            most_recent_code = {props.most_recent_code}\n            confirmed_qr_code = {props.confirmed_qr_code}\n            error_with_confirmation = { props.error_with_confirmation}\n            resetScanner = {props.resetScanner}\n            confirmQrCode = {props.confirmQrCode}\n          />\n      }\n\n      <button onClick={changeScanModeSetting}>\n        {state.scanMode ? 'Switch To Manual Input' : 'Switch to Scanner Mode'}\n      </button>\n      {\n        state.scanMode ? (\n          <>\n            <div className=\"qr-content\">\n              {qrContent}\n              {props.loading && <p>Loading...</p>}\n              \n            </div>\n            {\n              !showModal ? (\n                <button className={\n                  props.most_recent_code \n                  ? 'scan-again' \n                  : props.scanner_active \n                  ? 'scan-stop' \n                  : 'scan'\n                }\n                  onClick={\n                    () => {\n                      setScannerActive(!props.scanner_active)\n                    }\n                  }\n                >\n                  <FontAwesomeIcon icon={faCamera} size={'2x'}/>\n                </button>\n              ) : null\n            }\n          </>\n        ) : <p> manual entry mode todo: </p>\n      }\n    </div>\n  );\n}\n\nconst mapDispatchToProps = {\n  scanQrCode,\n  confirmQrCode,\n  setScannerActive,\n  resetScanner,\n}\nconst mapStateToProps = ({qr_scanner}) => qr_scanner\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QRScanner);\n","import {\n    FETCH_EVENTS_START,\n    FETCH_EVENTS_SUCCESS,\n    FETCH_EVENTS_ERROR\n} from '../actions'\n\nexport const initialState = {\n    loading: false,\n    error: null,\n    events: null\n}\n\nexport const statisticsPageReducer = (state=initialState, action) => {\n    switch(action.type){\n        case FETCH_EVENTS_START:\n            return {\n                ...state,\n                loading: true,\n                error: null\n            }\n        case FETCH_EVENTS_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                error: null,\n                events: action.payload.events\n            }\n        case FETCH_EVENTS_ERROR:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error\n            }\n        default:\n            return state\n    }\n}","import React, {useReducer, useEffect, useState} from \"react\";\nimport {getEvents} from '../../actions'\nimport {statisticsPageReducer, initialState} from '../../reducers/adminReducers'\n\nexport default function Statistics(props){\n    const [state, dispatch] = useReducer(statisticsPageReducer, initialState)\n    const [tableEvent, setTableEvent] = useState(null)\n    useEffect(() => {\n        getEvents()(dispatch)\n    }, [])\n\n    if(state.loading){\n        return 'Loading'\n    }\n    if (state.events){\n        return <>\n            {state.events.map((event, i) => \n                <button key={event.id} name={event.name} onClick={() => setTableEvent(event)}>\n                    {event.name}\n                </button>\n                )\n            }\n            {\n                tableEvent ? (\n                    <table style={{width: '100%', textAlign: 'center'}}>\n                        <thead>\n                            <tr>\n                                <th>Promoter</th>\n                                <th>Registration Count</th>\n                            </tr> \n                        </thead>\n                        <tbody>\n                            {\n                                tableEvent.event_promoters.map(\n                                    promoter => (\n                                        <tr>\n                                            <td>\n                                                {promoter.promoter_name}\n                                            </td>\n                                            <td>\n                                                {promoter.registration_count}\n                                            </td>\n                                        </tr>\n                                    )\n                                )\n                            }\n                        </tbody>\n                    </table>\n                ) : null\n            }\n        </>\n    }\n    if (state.error){\n        return 'error'\n    }\n    return null\n}","import React from \"react\";\nimport {\n  Switch,\n  Route,\n  useRouteMatch\n} from \"react-router-dom\";\nimport Statistics from './Statistics'\n\nexport default function AdminRoutes() {\n    // The `path` lets us build <Route> paths that are\n    // relative to the parent route, while the `url` lets\n    // us build relative links.\n    let { path } = useRouteMatch();\n    return (\n        <Switch>\n            <Route path={`${path}/statistics/`}>\n                <Statistics />\n            </Route>\n        </Switch>  \n    );\n  }\n  ","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nimport QRScanner from './components/QRScanner'\nimport AdminRoutes from './components/admin/AdminRoutes'\n\nfunction App(props) {\n  return (\n    <Router>\n      {/* A <Switch> looks through its children <Route>s and\n          renders the first one that matches the current URL. */}\n      <Switch>\n        <Route path=\"/admin\">\n          <AdminRoutes />\n        </Route>\n        <Route path=\"/\">\n          <QRScanner/>\n        </Route>\n        <Redirect to='/'/>\n      </Switch>\n      </Router>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    QR_SCANNER_START,\n    QR_SCANNER_SUCCESS,\n    QR_SCANNER_ERROR,\n    CONFIRM_CODE_START,\n    CONFIRM_CODE_SUCCESS,\n    CONFIRM_CODE_ERROR,\n    SET_SCANNER_ACTIVE,\n    RESET\n} from '../actions'\n\nconst initialState = {\n    scanner_active: true,\n    fetching_qr_code: false,\n    qr_code_fetch_error: null,\n    most_recent_code: null,\n    qr_code_fetched: false,\n    confirming_qr_code: false,\n    error_with_confirmation: null,\n    confirmed_qr_code: false,\n}\n\n\nexport const qr_scanner = (state=initialState, action) => {\n    switch(action.type){\n        case RESET:\n            return {\n                ...state,\n                ...initialState\n            }\n        case SET_SCANNER_ACTIVE:\n            return {\n                ...state,\n                qr_code_fetch_error: null,\n                ...action.payload\n            }\n        case QR_SCANNER_START:\n            return {\n                ...state,\n                fetching_qr_code: true,\n                scanner_active: false,\n            }\n        case QR_SCANNER_SUCCESS:\n            return {\n                ...state,\n                ...initialState,\n                scanner_active: false,\n                qr_code_fetched: true,\n                fetching_qr_code: false,\n                most_recent_code: action.payload.value\n            }\n        case QR_SCANNER_ERROR:\n            return {\n                ...state,\n                scanner_active: false,\n                qr_code_fetched: false,\n                fetching_qr_code: false,\n                qr_code_fetch_error: action.payload.error.message\n            }\n        case CONFIRM_CODE_START:\n            return {\n                ...state,\n                confirming_qr_code: true\n            }\n        case CONFIRM_CODE_SUCCESS:\n            return {\n                ...state,\n                scanner_active: false,\n                confirmed_qr_code: true\n            }\n        case CONFIRM_CODE_ERROR:\n            return {\n                ...state,\n                error_with_confirmation: action.payload.error\n            }\n        default:\n            return state\n    }\n}\n","import { combineReducers } from 'redux'\nimport {qr_scanner} from './qrScannerReducer'\nconst rootReducer = combineReducers({\n    qr_scanner\n})\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './reducers'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}